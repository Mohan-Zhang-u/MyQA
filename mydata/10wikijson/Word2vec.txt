{"id": "Word2vec.txt", "text": "Word2vec is a group of related models that are used to produce word embeddings. These models are shallow, two-layer neural networks that are trained to reconstruct linguistic contexts of words. Word2vec takes as its input a large corpus of text and produces a vector space, typically of several hundred dimensions, with each unique word in the corpus being assigned a corresponding vector in the space. Word vectors are positioned in the vector space such that words that share common contexts in the corpus are located in close proximity to one another in the space.[1]\n\nWord2vec was created by a team of researchers led by Tomas Mikolov at Google. The algorithm has been subsequently analysed and explained by other researchers.[2][3] Embedding vectors created using the Word2vec algorithm have many advantages compared to earlier algorithms[1] such as latent semantic analysis.\n\n\nContents\n1\tCBOW and skip grams\n2\tParametrization\n2.1\tTraining algorithm\n2.2\tSub-sampling\n2.3\tDimensionality\n2.4\tContext window\n3\tExtensions\n4\tWord vectors for bioinformatics: BioVectors\n5\tWord vectors for Radiology: Intelligent Word Embedding (IWE)\n6\tAnalysis\n7\tPreservation of semantic and syntactic relationships\n8\tAssessing the quality of a model\n8.1\tParameters and model quality\n9\tImplementations\n10\tSee also\n11\tReferences\nCBOW and skip grams\nWord2vec can utilize either of two model architectures to produce a distributed representation of words: continuous bag-of-words (CBOW) or continuous skip-gram. In the continuous bag-of-words architecture, the model predicts the current word from a window of surrounding context words. The order of context words does not influence prediction (bag-of-words assumption). In the continuous skip-gram architecture, the model uses the current word to predict the surrounding window of context words. The skip-gram architecture weighs nearby context words more heavily than more distant context words.[1][4] According to the authors' note,[5] CBOW is faster while skip-gram is slower but does a better job for infrequent words.\n\nParametrization\nResults of word2vec training can be sensitive to parametrization. The following are some important parameters in word2vec training.\n\nTraining algorithm\nA Word2vec model can be trained with hierarchical softmax and/or negative sampling. To approximate the conditional log-likelihood a model seeks to maximize, the hierarchical softmax method uses a Huffman tree to reduce calculation. The negative sampling method, on the other hand, approaches the maximization problem by minimizing the log-likelihood of sampled negative instances. According to the authors, hierarchical softmax works better for infrequent words while negative sampling works better for frequent words and better with low dimensional vectors.[5] As training epochs increase, hierarchical softmax stops being useful.[6]\n\nSub-sampling\nHigh frequency words often provide little information. Words with frequency above a certain threshold may be subsampled to increase training speed.[7]\n\nDimensionality\nQuality of word embedding increases with higher dimensionality. But after reaching some point, marginal gain will diminish.[1] Typically, the dimensionality of the vectors is set to be between 100 and 1,000.\n\nContext window\nThe size of the context window determines how many words before and after a given word would be included as context words of the given word. According to the authors' note, the recommended value is 10 for skip-gram and 5 for CBOW.[5]\n\nExtensions\nAn extension of word2vec to construct embeddings from entire documents (rather than the individual words) has been proposed.[8] This extension is called paragraph2vec or doc2vec and has been implemented in the C, Python[9][10] and Java/Scala[11] tools (see below), with the Java and Python versions also supporting inference of document embeddings on new, unseen documents.\n\nWord vectors for bioinformatics: BioVectors\nAn extension of word vectors for n-grams in biological sequences (e.g. DNA, RNA, and Proteins) for bioinformatics applications have been proposed by Asgari and Mofrad.[12] Named bio-vectors (BioVec) to refer to biological sequences in general with protein-vectors (ProtVec) for proteins (amino-acid sequences) and gene-vectors (GeneVec) for gene sequences, this representation can be widely used in applications of machine learning in proteomics and genomics. The results suggest that BioVectors can characterize biological sequences in terms of biochemical and biophysical interpretations of the underlying patterns.[12] A similar variant, dna2vec, has shown that there is correlation between Needleman-Wunsch similarity score and cosine similarity of dna2vec word vectors.[13]\n\nWord vectors for Radiology: Intelligent Word Embedding (IWE)\nAn extension of word vectors for creating a dense vector representation of unstructured radiology reports has been proposed by Banerjee et. al.[14] One of the biggest challenges with Word2Vec is how to handle unknown or out-of-vocabulary (OOV) words and morphologically similar words. This can particularly be an issue in domains like medicine where synonyms and related words can be used depending on the preferred style of radiologist, and words may have been used infrequently in a large corpus. If the word2vec model has not encountered a particular word before, it will be forced to use a random vector, which is generally far from its ideal representation.\n\nIWE combines Word2vec with a semantic dictionary mapping technique to tackle the major challenges of information extraction from clinical texts, which include ambiguity of free text narrative style, lexical variations, use of ungrammatical and telegraphic phases, arbitrary ordering of words, and frequent appearance of abbreviations and acronyms. Of particular interest, the IWE model (trained on the one institutional dataset) successfully translated to a different institutional dataset which demonstrates good generalizability of the approach across institutions.\n\nAnalysis\nThe reasons for successful word embedding learning in the word2vec framework are poorly understood. Goldberg and Levy point out that the word2vec objective function causes words that occur in similar contexts to have similar embeddings (as measured by cosine similarity) and note that this is in line with J. R. Firth's distributional hypothesis. However, they note that this explanation is \"very hand-wavy\" and argue that a more formal explanation would be preferable.[2]\n\nLevy et al. (2015)[15] show that much of the superior performance of word2vec or similar embeddings in downstream tasks is not a result of the models per se, but of the choice of specific hyperparameters. Transferring these hyperparameters to more 'traditional' approaches yields similar performances in downstream tasks.\n\nPreservation of semantic and syntactic relationships\nThe word embedding approach is able to capture multiple different degrees of similarity between words. Mikolov et al. (2013)[16] found that semantic and syntactic patterns can be reproduced using vector arithmetic. Patterns such as \u201cMan is to Woman as Brother is to Sister\u201d can be generated through algebraic operations on the vector representations of these words such that the vector representation of \u201cBrother\u201d - \u201dMan\u201d + \u201dWoman\u201d produces a result which is closest to the vector representation of \u201cSister\u201d in the model. Such relationships can be generated for a range of semantic relations (such as Country\u2013Capital) as well as syntactic relations (e.g. present tense\u2013past tense)\n\nAssessing the quality of a model\nMikolov et al. (2013)[1] develop an approach to assessing the quality of a word2vec model which draws on the semantic and syntactic patterns discussed above. They developed a set of 8,869 semantic relations and 10,675 syntactic relations which they use as a benchmark to test the accuracy of a model. When assessing the quality of a vector model, a user may draw on this accuracy test which is implemented in word2vec,[17] or develop their own test set which is meaningful to the corpora which make up the model. This approach offers a more challenging test than simply arguing that the words most similar to a given test word are intuitively plausible.[1]\n\nParameters and model quality\nThe use of different model parameters and different corpus sizes can greatly affect the quality of a word2vec model. Accuracy can be improved in a number of ways, including the choice of model architecture (CBOW or Skip-Gram), increasing the training data set, increasing the number of vector dimensions, and increasing the window size of words considered by the algorithm. Each of these improvements comes with the cost of increased computational complexity and therefore increased model generation time.[1]\n\nIn models using large corpora and a high number of dimensions, the skip-gram model yields the highest overall accuracy, and consistently produces the highest accuracy on semantic relationships, as well as yielding the highest syntactic accuracy in most cases. However, the CBOW is less computationally expensive and yields similar accuracy results.[1]\n\nAccuracy increases overall as the number of words used increases, and as the number of dimensions increases. Mikolov et al.[1] report that doubling the amount of training data results in an increase in computational complexity equivalent to doubling the number of vector dimensions.\n\nAltszyler et al. (2017) [18] studied Word2vec performance in two semantic tests for different corpus size. They found that Word2vec has a steep learning curve, outperforming another word-embedding technique (LSA) when it is trained with medium to large corpus size (more than 10 million words). However, with a small training corpus LSA showed better performance. Additionally they show that the best parameter setting depends on the task and the training corpus. Nevertheless, for skip-gram models trained in medium size corpora, with 50 dimensions, a window size of 15 and 10 negative samples seems to be a good parameter setting."}